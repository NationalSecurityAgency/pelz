enclave {
	from "sgx_tsgxssl.edl" import *;
	from "sgx_pthread.edl" import *;
	from "kmyth_enclave.edl" import *;
	include "cipher/pelz_aes_keywrap_3394nopad.h"
	include "pelz_request_handler.h"
	include "common_table.h"
  include "channel_table.h"
	include "key_load.h"
	include "charbuf.h"
	trusted {

/**
 * <pre>
 * This function destroys the table specified by type.
 * <pre>
 *
 * @param[in] type The type of table to be destroyed (ex: key_table or server_table)
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus table_destroy(TableType type);

/**
 * <pre>
 * This function deletes a value in hash table based on location in id.
 * <pre>
 *
 * @param[in] type The table type that the id and value needs to be deleted from
 * @param[in] id.chars Table value identifier 
 * @param[in] id.len The length of the identifier
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus table_delete(TableType type, charbuf id);

/**
 * <pre>
 * This function outputs the number of entries of the TableType specificed by type.
 * <pre>
 *
 * @param[in] type The table type
 * @param[out] count Table number of entries
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus table_id_count(TableType type, [out] size_t *count);

/**
 * <pre>
 * This function outputs the <id> at index value of the TableType specificed by type.
 * <pre>
 *
 * @param[in] type The table type
 * @param[in] index The index value indicating the location of <id> in TableType
 * @param[out] id.chars Table value identifier
 * @param[out] id.len The length of the identifier
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus table_id(TableType type, int index, [out] charbuf* id);

/**
 * <pre>
 * This function to add values into the server hash table.
 * </pre>
 *
 * @param[in] type The table type
 * @param[in] handle The handle value for the cert data location in the kmyth unseal data table
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus add_cert_to_table(TableType type, uint64_t handle);

/**
 * <pre>
 * This function initializes a pkey.
 * <pre>
 *
 * @param[in] private_pkey The pointer for pkey to be initialized
 * @param[out] private_pkey The initialized pkey
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus private_pkey_init(void);

/**
 * <pre>
 * This function frees the pkey.
 * <pre>
 *
 * @param[in] private_pkey The pointer for pkey to be freed
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus private_pkey_free(void);

/**
 * <pre>
 * This function adds a pkey from unseal table based on handle.
 * </pre>
 *
 * @param[in] handle The handle value for the pkey data location in the kmyth unseal data table
 * @param[in] private_pkey The empty or old pkey
 * @param[out] private_pkey The new pkey
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus private_pkey_add(uint64_t handle);

/**
 * <pre>
 * This function to add values in hash table based on location in key_id.
 * </pre>
 *
 * @param[in] key_id.chars Key identifier
 * @param[in] key_id.len The length of the key identifier
 * @param[in] key.chars The key value
 * @param[in] key.len The length of the key
 * @param[in] key_table The key table that the new key needs to be added to
 * @param[out] key_table The key table with the new added key
 *
 * @return 0 on success, 1 on error
 */
public TableResponseStatus key_table_add_key(charbuf key_id, charbuf key);

/**
 * <pre>
 * This function to add values in hash table based on location in key_id.
 * </pre>
 *
 * @param[in] key_id.chars Key identifier
 * @param[in] key_id.len The length of the key identifier
 * @param[in] handle The handle value for the key data location in the kmyth unseal data table
 * @param[in] key_table The key table that the new key needs to be added to
 * @param[out] key_table The key table with the new added key
 *
 * @return 0 on success, 1 on error
 */
public TableResponseStatus key_table_add_from_handle(charbuf key_id, uint64_t handle);

/**
 * <pre>
 * This function to add values in hash table based on location in key_id.
 * </pre>
 *
 * @param[in] key_id.chars Key identifier
 * @param[in] key_id.len The length of the key identifier
 * @param[in] server.chars Server identifier
 * @param[in] server.len The length of the server identifier
 * @param[in] port The connection port to server
 * @param[in] server_key_id.chars Key on server identifier
 * @param[in] server_key_id.len The length of the key on server identifier
 * @param[in] key_table The key table that the new key needs to be added to
 * @param[out] key_table The key table with the new added key
 *
 * @return 0 on success, 1 on error
 */
public TableResponseStatus key_table_add_from_server(charbuf key_id, charbuf server_id,
  int port, charbuf server_key_id);

/**
 * <pre>
 * This function initializes the channel table.
 * <pre>
 *
 * @param[in] entry_num  Number of charbuf slots allocated to the channel table.
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus chan_table_init(int entry_num);


/**
 * <pre>
 * This function destroys the channel table.
 * <pre>
 *
 * @return OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public TableResponseStatus chan_table_destroy();

/**
 * <pre>
 * This function implements encrypt request handling by looking if pelz already has
 * the key and if not then adding the key to the key table. Along with the
 * key lookup, this function checks the request type then based on the request
 * type it calls the wrap or unwrap functions to return requested key value.
 * <pre>
 *
 * @param[in] request_type the type of the request (encrypt or decrypt)
 * @param[in] key_id       the key_id of the key to be used for the request
 * @param[in] cipher_name  the name of the cipher used for the request
 * @param[in] plain_data   the input data
 * @param[out] cipher_data a pointer to a charbuf to hold the output, will
 *                         be created inside the call
 * @param[out] iv          a pointer to a charbuf to hold the IV, will
 *                         be allocated inside the call if necessary
 * @param[out] tag         the MAC tag produced by the encryption, will
 *                         be allocated inside the call if necessary
 * @param[in] signature    the signature over the request
 * @param[in] cert         the certificate used to validate the signature
 *
 * @return REQUEST_OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public RequestResponseStatus pelz_encrypt_request_handler(RequestType request_type, charbuf key_id, charbuf cipher_name, charbuf plain_data, [out] charbuf* cipher_data, [out] charbuf* iv, [out] charbuf* tag, charbuf signature, charbuf cert);

/**
 * <pre>
 * This function implements decrypt handling by looking if pelz already has
 * the key and if not then adding the key to the key table. Along with the
 * key lookup, this function checks the request type then based on the request
 * type it calls the wrap or unwrap functions to return requested key value.
 * <pre>
 *
 * @param[in] request_type the type of the request (encrypt or decrypt)
 * @param[in] key_id       the key_id of the key to be used for the request
 * @param[in] cipher_name  the name of the cipher used for the request
 * @param[in] cipher_data  the input data
 * @param[in] iv           the iv used to encrypt the data, may be empty.
 * @param[in] tag          the MAC tag for the encryption, may be empty.
 * @param[out] plain_data  a pointer to a charbuf to hold the output, will
 *                         be created inside the call
 * @param[in] signature    the signature over the request
 * @param[in] cert         the certificate used to validate the signature
 *
 * @return REQUEST_OK on success, an error message indicating the type of
 *                    error otherwise.
 */
public RequestResponseStatus pelz_decrypt_request_handler(RequestType request_type, charbuf key_id, charbuf cipher_name, charbuf cipher_data, charbuf iv, charbuf tag, [out] charbuf* plain_data, charbuf signature, charbuf cert);
	};
	untrusted {
/**
 * <pre>
 * Malloc untrusted memory from within the enclave. The result must
 * be checked to ensure it lies outside the enclave by calling
 * sgx_is_outside_enclave(*buf, size);
 * <pre>
 *
 * @param[in]     size the size to allocate (in bytes).
 * @param[in,out] buf  a pointer to a pointer to hold the allocated space
 *
 * @return none
 */
void ocall_malloc(size_t size, [user_check] unsigned char** buf);


/**
 * <pre>
 * Frees untrusted memory from within the enclave. If the length of the
 * buffer is available the caller should check that it is entirely outside
 * enclave memory by calling
 * sgx_is_outside_enclave(ptr, len);
 * <pre>
 *
 * @param[in] ptr the pointer to be freed
 * @param[in] len the length of the buffer pointed to by ptr
 *
 * @return none
 */
void ocall_free([user_check] void* ptr, size_t len);
	};
};	
	
