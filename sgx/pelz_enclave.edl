enclave {
	from "sgx_tsgxssl.edl" import *;
	from "sgx_pthread.edl" import *;
        include "aes_keywrap_3394nopad.h"
	include "pelz_request_handler.h"
	include "key_table.h"
	include "pelz_io.h"
	include "charbuf.h"
        include "test_enclave_helper_functions.h"
	trusted {
	public int key_table_init(void);
	public int key_table_destroy(void);
	public int key_table_delete(charbuf key_id);
        public int test_key_table_add(charbuf key_id);
        public int test_key_table_lookup(charbuf key_id);
	public RequestResponseStatus pelz_request_handler(RequestType request_type, charbuf key_id, charbuf data, [out] charbuf* output);
        public int aes_keywrap_3394nopad_encrypt(unsigned char *key, size_t key_len, unsigned char *inData, size_t inData_len, [out] unsigned char **outData, [out] size_t * outData_len);
        public int aes_keywrap_3394nopad_decrypt(unsigned char *aes_key, size_t key_len, unsigned char *inData, size_t inData_len, [out] unsigned char **outData, [out] size_t * outData_len);
	};
	untrusted {
	int key_load(size_t key_id_len, [in, size=key_id_len] unsigned char* key_id,
	             [out] size_t* key_len, [user_check] unsigned char** key);
	void ocall_malloc(size_t size, [user_check] char** buf);
	void ocall_free([user_check] void* ptr, size_t len);
	};
};	
	
