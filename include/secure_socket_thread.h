#ifndef INCLUDE_SECURE_SOCKET_THREAD_H_
#define INCLUDE_SECURE_SOCKET_THREAD_H_

#include <pthread.h>

#include "sgx_eid.h"
#include "sgx_dh.h"

// This is somewhat arbitrary.
#define MAX_MSG_SIZE 4096

// The message structs and enum below are originally from
// linux-sgx/SampleCode/LocalAttestation/Include/fifo_def.h
// << These may be moved to another header later >>

typedef enum{
	FIFO_DH_REQ_MSG1,
	FIFO_DH_RESP_MSG1,
	FIFO_DH_MSG2,
	FIFO_DH_MSG3,
	FIFO_DH_MSG_REQ,
	FIFO_DH_MSG_RESP,
	FIFO_DH_CLOSE_REQ,
	FIFO_DH_CLOSE_RESP
}FIFO_MSG_TYPE;

typedef struct _fifomsgheader
{
	FIFO_MSG_TYPE type;
	size_t size; // demonstrate FIFO message content size
	int sockfd;
}FIFO_MSG_HEADER;

typedef struct _fifomsg
{
	FIFO_MSG_HEADER header;
	unsigned char msgbuf[1];
}FIFO_MSG;

typedef struct _session_close
{
	uint32_t session_id;
}SESSION_CLOSE_REQ;

typedef struct _session_msg1_response
{
	uint32_t sessionid;   // responder create a session ID and input here
	sgx_dh_msg1_t dh_msg1; // responder returns msg1
}SESSION_MSG1_RESP;

typedef struct _session_msg2
{
	uint32_t sessionid;
	sgx_dh_msg2_t dh_msg2;
}SESSION_MSG2;

typedef struct _session_msg3
{
	uint32_t sessionid;
	sgx_dh_msg3_t dh_msg3;
}SESSION_MSG3;

typedef struct _fifo_msg_req
{
	uint32_t session_id;
	size_t max_payload_size;
	size_t size;
	unsigned char buf[1];
}FIFO_MSGBODY_REQ;



typedef struct
{
  int socket_id;
  int port;
  int max_requests;
  pthread_mutex_t lock;
} ThreadArgs;

/**
 * <pre>
 * Function executed on generation of secure socket to listen for connections
 * <pre>
 *
 * @param[in] arg a pointer to a structure containing the
 *                socket id for that thread and the key table
 *                mutex.
 *
 * @return none
 */
void *secure_socket_thread(void *arg);

/**
 * <pre>
 * Function executed on each thread generated by connection to secure socket
 * <pre>
 * 
 * @param[in] arg a pointer to a structure containing the 
 *                socket id for that thread and the key table
 *                mutex.
 *
 * @return none
 */
void *secure_socket_process(void *arg);

#endif
